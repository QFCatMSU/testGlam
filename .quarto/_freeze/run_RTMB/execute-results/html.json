{
  "hash": "564a442bbd7bb7e8af9649c3f7e43006",
  "result": {
    "markdown": "---\ntitle: \"RTMB and GLAM walkthrough\"\nformat:\n  html:\n    toc: true\n    css: \"https://qfcatmsu.github.io/css/presStyle.css\"\neditor: visual\n---\n\n\n## Load packages and source R scripts\n\nSince this is not a R package, each necessary R script will need to be sourced.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RTMB)\n# for plotting\n# devtools::install_github(\"QFCatMSU/gg-qfc\")\nlibrary(ggqfc)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(here) # used to source R scripts\n# otherwise, can just use (\"R/script_name\") is using R projects\n\n# R scripts for running GLAM (see )\nsource(here(\"R\", \"glam.R\"))\nsource(here(\"R\", \"run_glam.R\"))\nsource(here(\"R\", \"check_convergence.R\"))\nsource(here(\"R\", \"rename_data.R\"))\nsource(here(\"R\", \"prep_glam_data.R\"))\nsource(here(\"R\", \"prep_glam_pars.R\"))\nsource(here(\"R\", \"run_retro.R\"))\nsource(here(\"R\", \"run_peel.R\"))\n```\n:::\n\n\n## Read in data\n\nIf your data is within a Excel sheet, run `prep_glam_data.r`. This will convert the data from the Excel sheet to a format that can be for RTMB. It also converts the names from ADMB to RTMB.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_file_name = \"MI4_LWF_DAT_10_23_2023\"\ndata = prep_glam_data(model_name = \"MI4\",\n                    data_file_name = data_file_name,\n                    sel_type_trap = \"logistic\",\n                    gill_fleet = TRUE,\n                    rec_fleet = FALSE,\n                    pauly_M = TRUE,\n                    recruit_model = \"AR1\")\n```\n:::\n\n\n*(In progress) from ADMB .dat file*\n\nFor this demostration, we'll use the simulated data set (WF_sim_data.Rdata).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(here(\"data\", \"WF_sim_data.Rdata\"))\n```\n:::\n\n\n## Define parameters\n\nUse `prep_glam_pars.r` to set up initial estimates for parameters. If a parameter is not being used in your model, put \"NULL\" in the argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npars = prep_glam_pars(log_sig = -2,\n                        log_M = data$log_M_init,\n                        log_q_trap = -5,\n                        log_q_gill = -5,\n                        log_q_rec = NULL,\n                        log_q_trap_dev = numeric(data$n_years - 1),\n                        log_q_gill_dev = numeric(data$n_years - 1),\n                        log_q_rec_dev = NULL,\n                        log_sel_trap_p1 = 6.06,\n                        log_sel_trap_p2 = -2.9,\n                        log_sel_gill_p1 = -2.1,\n                        log_sel_gill_p2 = 1.82,\n                        log_sel_rec_p1 = NULL,\n                        log_sel_rec_p2 = NULL,\n                        log_sel_trap_dev = numeric(data$n_years - 1),\n                        log_sel_gill_dev = numeric(data$n_years - 1),\n                        log_sel_rec_dev = NULL,\n                        log_pop_init = rep(9, 4),\n                        log_recr_init = 12,\n                        log_recr_avg = 12,\n                        log_recr_dev = numeric(data$n_years - 1),\n                        acor = 0.5\n                        )\n```\n:::\n\n\n## Set up model run\n\nNotice that the data and pars lists are not in the argument of `run_glam.r`. This is how it is set up for RTMB. RTMB will pick up the list names based on what is defined within the RTMB function. You cannot use other names for the data list and parameters list. (*data* and *pars*).\n\nYou use `run_glam.r` to conduct a model run. `nlminb` is being used to run RTMB. You can define the control list, which can help with improving model runs (e.g., increasing number of iterations; description is [here](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb)).\n\n\\[hessian\\]\n\nYou can also run Newton steps, which helps with improving the gradient. Warning: use this only if the maximum gradient is close enough to the tolerance/threshold of convergence (max gradient \\< 1e-3). This will not help if the model is not converged or the maximum gradient is too high (max gradient \\> 0.1). Typically, three Newton steps (`n_newton = 3`) are recommended since they do not improve the gradients beyond that.\n\n\\[fixed, random\\]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres = run_glam(nlminb_control = list(\n                      eval.max = 1e4,\n                      iter.max = 1e4\n                    ),\n                    hessian_run = FALSE,\n                    run_newton = TRUE,\n                    n_newton = 3,\n                    fixed_names = NULL,\n                    rand_names = NULL)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nModel diagnostics consistent with convergence.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Standard errors for some parameter estimates are high, consider checking this!\"\n```\n:::\n:::\n\n\n### Messages\n\n-   Model convergence: If the model did not converge, a warning will print: \"*Model did not converge!*\". If the model has good gradients, the hessian is invertible, and all the parameters are identifiable, then this will appear: \"*Model diagnostics consistent with convergence.*\"\n\n-   High gradients: If the maximum gradient is too high (\\> 1e-3), a warning will print: \"*Gradients are high, please improve optimization!*\". If there are any parameters that do not meet this threshold, then a list of \"bad\" parameters will be given in `res$check$whichbad_param`.\n\n-   Hessian: If there are any NaNs in the Hessian matrix, then the hessian is not invertible \\[?\\] and the model has not converged. It will print: \"*The hessian was not invertible*\".\n\n-   Eigen: Parameters are considered identifiable... \\[?\\] If paramters are not identifiable, the hessian (and standard error) cannot be estimated for that parameter and the model has failed to converge. Sometimes, fixing the non-identifiable parameter improves the model run. *Warning*: This check will only run if the gradients met the threshold. It will not run if there are bad gradients.\n\n-   Standard error check: If the standard errors for the parameter estimates are high, a warning will print: \"*Standard errors for some parameter estimates are high, consider checking this!*.\" This does not stop the model run, but considerations should be made to check the parameter estimates and rerun the model if the standard errors are unreasonable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# look if the model is converged and well estimated\ncheck = res$check\ncheck$convergence # 1 - non convergence; 0 - convergence\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\ncheck$message # type of convergence (relative is fine as long as the other checks below are good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"both X-convergence and relative convergence (5)\"\n```\n:::\n\n```{.r .cell-code}\ncheck$max_gradient # maximum gradient\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.203952e-09\n```\n:::\n\n```{.r .cell-code}\ncheck$whichbad_params # prints out which parameters do not meet threshold (1e-3). This should be NULL if there are no issues\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\ncheck$whichbad_eigen # prints out which parameters have bad eigen values. This should be NULL if there are no issues\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\ncheck$sdcheck # prints out which parameters have high standard errors\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      Estimate Std. Error\nlog_q_trap_dev    0.0041760824 0.14007472\nlog_q_trap_dev    0.0255956564 0.14286093\nlog_q_trap_dev   -0.0638237008 0.13840200\nlog_q_trap_dev   -0.0279886206 0.13930335\nlog_q_trap_dev   -0.0407167409 0.13750907\nlog_q_trap_dev    0.0639471647 0.13604435\nlog_q_trap_dev    0.0677741161 0.14223954\nlog_q_gill_dev   -0.0293278735 0.14057240\nlog_sel_trap_dev  0.0053422601 0.01170065\nlog_sel_trap_dev  0.0001868108 0.01173908\nlog_sel_trap_dev -0.0001321034 0.01166746\nlog_sel_trap_dev  0.0056652042 0.01148095\nlog_sel_trap_dev  0.0031547256 0.01143585\nlog_sel_trap_dev -0.0029734947 0.01121752\nlog_sel_trap_dev  0.0006690528 0.01104473\nlog_sel_trap_dev  0.0011234768 0.01090512\nlog_sel_trap_dev  0.0010263762 0.01094957\nlog_sel_trap_dev -0.0005736797 0.01103460\nlog_sel_trap_dev  0.0030879979 0.01110054\nlog_sel_trap_dev  0.0029875584 0.01118166\nlog_sel_trap_dev -0.0054922223 0.01117585\nlog_sel_trap_dev -0.0026360439 0.01100729\nlog_sel_trap_dev -0.0028433863 0.01111317\nlog_sel_trap_dev  0.0045828442 0.01149218\nlog_sel_trap_dev  0.0045828442 0.01149218\nlog_sel_trap_dev -0.0028890112 0.01129528\nlog_sel_trap_dev -0.0047291422 0.01141617\nlog_sel_trap_dev -0.0015026640 0.01154009\nlog_sel_trap_dev  0.0004395665 0.01154573\nlog_sel_trap_dev -0.0029860263 0.01164739\nlog_sel_trap_dev -0.0027566602 0.01177828\nlog_sel_trap_dev  0.0003561170 0.01203948\nlog_sel_trap_dev -0.0048162135 0.01191201\nlog_sel_trap_dev -0.0015658319 0.01215042\nlog_sel_gill_dev -0.0041582724 0.01226252\nlog_sel_gill_dev -0.0002705291 0.01225928\nlog_sel_gill_dev -0.0025338327 0.01223312\nlog_sel_gill_dev  0.0005423110 0.01221404\nlog_sel_gill_dev  0.0058886196 0.01222134\nlog_sel_gill_dev  0.0020670444 0.01211324\nlog_sel_gill_dev -0.0036680837 0.01207761\nlog_sel_gill_dev -0.0024575112 0.01202310\nlog_sel_gill_dev  0.0031302011 0.01203973\nlog_sel_gill_dev  0.0006097779 0.01204205\nlog_sel_gill_dev  0.0024228431 0.01204441\nlog_sel_gill_dev  0.0039619165 0.01205126\nlog_sel_gill_dev  0.0051610204 0.01203028\nlog_sel_gill_dev  0.0056649019 0.01201003\nlog_sel_gill_dev  0.0030549249 0.01201174\nlog_sel_gill_dev  0.0056853754 0.01203580\nlog_sel_gill_dev  0.0033185909 0.01205068\nlog_sel_gill_dev  0.0044495512 0.01204866\nlog_sel_gill_dev  0.0040917884 0.01204986\nlog_sel_gill_dev -0.0015399645 0.01206367\nlog_sel_gill_dev -0.0002888644 0.01208172\nlog_sel_gill_dev -0.0004544363 0.01210679\nlog_sel_gill_dev -0.0017694347 0.01214694\nlog_sel_gill_dev -0.0031269828 0.01219165\nlog_sel_gill_dev -0.0031392455 0.01221682\nlog_sel_gill_dev -0.0051214597 0.01225406\nlog_sel_gill_dev -0.0044302934 0.01228110\nlog_sel_gill_dev -0.0037082361 0.01233198\nlog_sel_gill_dev -0.0024263096 0.01235653\nlog_sel_gill_dev -0.0010351048 0.01239025\nlog_sel_gill_dev -0.0001106984 0.01238792\nlog_sel_gill_dev  0.0001907990 0.01242638\nlog_recr_dev      0.1268356207 0.29760292\nlog_recr_dev     -0.0016765868 0.24788771\nlog_recr_dev      0.0065919349 0.26995647\nlog_recr_dev      0.0481641466 0.32175168\nlog_recr_dev      0.1195534824 0.29541268\nlog_recr_dev      0.0887215396 0.27923483\nlog_recr_dev     -0.0356450823 0.24947302\nlog_recr_dev     -0.2250084971 0.69170624\nlog_recr_dev      0.0000000000 1.24586190\n```\n:::\n:::\n\n\nNow save results here:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreport = res$report$out # only export model results (e.g., catch, biomass, selectivity, etc.)\n```\n:::\n\n\n## Plot results\n\n\\[In progress\\]\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](run_RTMB_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](run_RTMB_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](run_RTMB_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](run_RTMB_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](run_RTMB_files/figure-html/unnamed-chunk-11-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](run_RTMB_files/figure-html/unnamed-chunk-11-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](run_RTMB_files/figure-html/unnamed-chunk-11-4.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## Retrospective analysis\n\n## ADMB vs TMB names\n",
    "supporting": [
      "run_RTMB_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}